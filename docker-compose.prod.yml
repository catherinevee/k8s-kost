version: '3.8'

services:
  # PostgreSQL with TimescaleDB for time-series data
  postgres:
    image: timescale/timescaledb:latest-pg14
    container_name: k8s-cost-postgres-prod
    environment:
      POSTGRES_DB: k8s_cost_optimizer
      POSTGRES_USER: ${DB_USER:-k8s_cost_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./backend/internal/database/migrations.sql:/docker-entrypoint-initdb.d/01-migrations.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-k8s_cost_user} -d k8s_cost_optimizer"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - k8s-cost-prod-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: k8s-cost-redis-prod
    ports:
      - "6379:6379"
    volumes:
      - redis_prod_data:/data
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru --requirepass ${REDIS_PASSWORD:-redis_password}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-redis_password}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - k8s-cost-prod-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Backend API server
  backend:
    image: ${REGISTRY:-k8s-cost-optimizer}/k8s-cost-optimizer:${VERSION:-latest}
    container_name: k8s-cost-backend-prod
    ports:
      - "8080:8080"
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-k8s_cost_user}:${DB_PASSWORD:-secure_password}@postgres:5432/k8s_cost_optimizer
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379
      - PROMETHEUS_URL=http://prometheus:9090
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION:-us-west-2}
      - CLUSTER_NAME=${CLUSTER_NAME:-production-cluster}
      - NAMESPACE=${NAMESPACE:-default}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - CACHE_TTL=${CACHE_TTL:-900}
      - METRICS_RETENTION_DAYS=${METRICS_RETENTION_DAYS:-90}
      - MAX_CONCURRENT_REQUESTS=${MAX_CONCURRENT_REQUESTS:-100}
    volumes:
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - k8s-cost-prod-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
      replicas: 2

  # Frontend application
  frontend:
    image: ${REGISTRY:-k8s-cost-optimizer}/k8s-cost-optimizer-frontend:${VERSION:-latest}
    container_name: k8s-cost-frontend-prod
    environment:
      - REACT_APP_API_URL=http://backend:8080
      - NODE_ENV=production
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - k8s-cost-prod-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
      replicas: 2

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: k8s-cost-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - k8s-cost-prod-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: k8s-cost-prometheus-prod
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_prod_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - k8s-cost-prod-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: k8s-cost-grafana-prod
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SERVER_ROOT_URL: ${GRAFANA_URL:-http://localhost:3001}
    volumes:
      - grafana_prod_data:/var/lib/grafana
      - ./monitoring/grafana-dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana-datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - k8s-cost-prod-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # AlertManager for notifications
  alertmanager:
    image: prom/alertmanager:latest
    container_name: k8s-cost-alertmanager-prod
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_prod_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - k8s-cost-prod-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

volumes:
  postgres_prod_data:
    driver: local
  redis_prod_data:
    driver: local
  prometheus_prod_data:
    driver: local
  grafana_prod_data:
    driver: local
  alertmanager_prod_data:
    driver: local

networks:
  k8s-cost-prod-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16 