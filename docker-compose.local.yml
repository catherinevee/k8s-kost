version: '3.8'

services:
  # PostgreSQL with TimescaleDB for time-series data
  postgres:
    image: timescale/timescaledb:latest-pg14
    container_name: k8s-cost-postgres
    environment:
      POSTGRES_DB: k8s_cost_optimizer
      POSTGRES_USER: k8s_cost_user
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/internal/database/migrations.sql:/docker-entrypoint-initdb.d/01-migrations.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U k8s_cost_user -d k8s_cost_optimizer"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - k8s-cost-network

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: k8s-cost-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - k8s-cost-network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: k8s-cost-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - k8s-cost-network

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: k8s-cost-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana-dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana-datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - k8s-cost-network

  # Backend API server
  backend:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: development
    container_name: k8s-cost-backend
    ports:
      - "8080:8080"
    environment:
      - DATABASE_URL=postgresql://k8s_cost_user:password@postgres:5432/k8s_cost_optimizer
      - REDIS_URL=redis://redis:6379
      - PROMETHEUS_URL=http://prometheus:9090
      - LOG_LEVEL=debug
      - MOCK_CLOUD_PROVIDER=true
      - CLUSTER_NAME=local-cluster
    volumes:
      - ./backend:/app/backend
      - ./pkg:/app/pkg
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - k8s-cost-network
    profiles:
      - full-stack

  # Frontend development server
  frontend:
    build:
      context: ./frontend
      dockerfile: ../docker/Dockerfile.frontend
      target: development
    container_name: k8s-cost-frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8080
      - NODE_ENV=development
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - k8s-cost-network
    profiles:
      - full-stack

  # Mock Kubernetes cluster for testing
  kind-cluster:
    image: kindest/node:v1.25.0
    container_name: k8s-cost-kind
    privileged: true
    ports:
      - "6443:6443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: ["/usr/local/bin/entrypoint", "/sbin/init"]
    networks:
      - k8s-cost-network
    profiles:
      - kubernetes

  # Metrics server for the mock cluster
  metrics-server:
    image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
    container_name: k8s-cost-metrics-server
    command:
      - /metrics-server
      - --kubelet-insecure-tls
      - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
    depends_on:
      - kind-cluster
    networks:
      - k8s-cost-network
    profiles:
      - kubernetes

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  k8s-cost-network:
    driver: bridge 